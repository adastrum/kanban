/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import "rxjs/add/observable/fromPromise";
import "rxjs/add/observable/of";
import "rxjs/add/observable/throw";
import "rxjs/add/operator/map";
import "rxjs/add/operator/toPromise";
import "rxjs/add/operator/mergeMap";
import "rxjs/add/operator/catch";

import { Observable } from "rxjs/Observable";
import { Injectable, Inject, Optional, InjectionToken } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpResponseBase,
  HttpErrorResponse
} from "@angular/common/http";
import { API_BASE_URL } from "../globals";

export interface IProjectTasksClient {
  getByFilter(filter: ProjectTaskFilter): Observable<ProjectTask[] | null>;
  create(model: CreateProjectTaskModel | null): Observable<object | null>;
  getById(id: string): Observable<ProjectTask | null>;
  update(
    id: string,
    model: UpdateProjectTaskModel | null
  ): Observable<object | null>;
  delete(id: string): Observable<object | null>;
}

@Injectable()
export class ProjectTasksClient implements IProjectTasksClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional()
    @Inject(API_BASE_URL)
    baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  getByFilter(filter: ProjectTaskFilter): Observable<ProjectTask[] | null> {
    let url_ = this.baseUrl + "/api/ProjectTasks?";
    if (name !== undefined)
      url_ += "Name=" + encodeURIComponent("" + name) + "&";
    if (filter.description !== undefined)
      url_ +=
        "Description=" + encodeURIComponent("" + filter.description) + "&";
    if (filter.number !== undefined)
      url_ += "Number=" + encodeURIComponent("" + filter.number) + "&";
    if (filter.reporterId !== undefined)
      url_ += "ReporterId=" + encodeURIComponent("" + filter.reporterId) + "&";
    if (filter.assigneeId !== undefined)
      url_ += "AssigneeId=" + encodeURIComponent("" + filter.assigneeId) + "&";
    if (filter.createdDate !== undefined)
      url_ +=
        "CreatedDate=" +
        encodeURIComponent(
          filter.createdDate ? "" + filter.createdDate.toJSON() : ""
        ) +
        "&";
    if (filter.dueDate !== undefined)
      url_ +=
        "DueDate=" +
        encodeURIComponent(filter.dueDate ? "" + filter.dueDate.toJSON() : "") +
        "&";
    if (filter.completedDate !== undefined)
      url_ +=
        "CompletedDate=" +
        encodeURIComponent(
          filter.completedDate ? "" + filter.completedDate.toJSON() : ""
        ) +
        "&";
    if (filter.status !== undefined)
      url_ += "Status=" + encodeURIComponent("" + filter.status) + "&";
    if (filter.projectId !== undefined)
      url_ += "ProjectId=" + encodeURIComponent("" + filter.projectId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    return this.http.get(url_).map(x => {
      return <ProjectTask[]>x;
    });
  }

  create(model: CreateProjectTaskModel | null): Observable<object | null> {
    let url_ = this.baseUrl + "/api/ProjectTasks";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    return this.http.post(url_, content_);
  }

  getById(id: string): Observable<ProjectTask | null> {
    let url_ = this.baseUrl + "/api/ProjectTasks/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    return this.http.get(url_).map(x => {
      return <ProjectTask>x;
    });
  }

  update(
    id: string,
    model: UpdateProjectTaskModel | null
  ): Observable<object | null> {
    let url_ = this.baseUrl + "/api/ProjectTasks/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    return this.http.put(url_, content_);
  }

  delete(id: string): Observable<object | null> {
    let url_ = this.baseUrl + "/api/ProjectTasks/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    return this.http.delete(url_);
  }
}

export enum ProjectTaskStatus {
  ToDo = "ToDo",
  InProgress = "InProgress",
  Done = "Done"
}

export class CreateProjectTaskModel implements ICreateProjectTaskModel {
  name: string;
  description: string;
  number: string;
  reporterId: string;
  assigneeId: string;
  createdDate: Date;
  dueDate?: Date | undefined;
  completedDate?: Date | undefined;
  status: ProjectTaskStatus;
  projectId: string;

  constructor(data?: ICreateProjectTaskModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.name = data["Name"];
      this.description = data["Description"];
      this.number = data["Number"];
      this.reporterId = data["ReporterId"];
      this.assigneeId = data["AssigneeId"];
      this.createdDate = data["CreatedDate"]
        ? new Date(data["CreatedDate"].toString())
        : <any>undefined;
      this.dueDate = data["DueDate"]
        ? new Date(data["DueDate"].toString())
        : <any>undefined;
      this.completedDate = data["CompletedDate"]
        ? new Date(data["CompletedDate"].toString())
        : <any>undefined;
      this.status = data["Status"];
      this.projectId = data["ProjectId"];
    }
  }

  static fromJS(data: any): CreateProjectTaskModel {
    data = typeof data === "object" ? data : {};
    let result = new CreateProjectTaskModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["Name"] = this.name;
    data["Description"] = this.description;
    data["Number"] = this.number;
    data["ReporterId"] = this.reporterId;
    data["AssigneeId"] = this.assigneeId;
    data["CreatedDate"] = this.createdDate
      ? this.createdDate.toISOString()
      : <any>undefined;
    data["DueDate"] = this.dueDate
      ? this.dueDate.toISOString()
      : <any>undefined;
    data["CompletedDate"] = this.completedDate
      ? this.completedDate.toISOString()
      : <any>undefined;
    data["Status"] = this.status;
    data["ProjectId"] = this.projectId;
    return data;
  }
}

export interface ICreateProjectTaskModel {
  name: string;
  description: string;
  number: string;
  reporterId: string;
  assigneeId: string;
  createdDate: Date;
  dueDate?: Date | undefined;
  completedDate?: Date | undefined;
  status: ProjectTaskStatus;
  projectId: string;
}

export class UpdateProjectTaskModel implements IUpdateProjectTaskModel {
  name: string;
  description: string;
  number: string;
  assigneeId: string;
  dueDate?: Date | undefined;
  completedDate?: Date | undefined;
  status: ProjectTaskStatus;

  constructor(data?: IUpdateProjectTaskModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.name = data["Name"];
      this.description = data["Description"];
      this.number = data["Number"];
      this.assigneeId = data["AssigneeId"];
      this.dueDate = data["DueDate"]
        ? new Date(data["DueDate"].toString())
        : <any>undefined;
      this.completedDate = data["CompletedDate"]
        ? new Date(data["CompletedDate"].toString())
        : <any>undefined;
      this.status = data["Status"];
    }
  }

  static fromJS(data: any): UpdateProjectTaskModel {
    data = typeof data === "object" ? data : {};
    let result = new UpdateProjectTaskModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["Name"] = this.name;
    data["Description"] = this.description;
    data["Number"] = this.number;
    data["AssigneeId"] = this.assigneeId;
    data["DueDate"] = this.dueDate
      ? this.dueDate.toISOString()
      : <any>undefined;
    data["CompletedDate"] = this.completedDate
      ? this.completedDate.toISOString()
      : <any>undefined;
    data["Status"] = this.status;
    return data;
  }
}

export interface IUpdateProjectTaskModel {
  name: string;
  description: string;
  number: string;
  assigneeId: string;
  dueDate?: Date | undefined;
  completedDate?: Date | undefined;
  status: ProjectTaskStatus;
}

export class ProjectTask {
  id: string;
  name: string;
  description: string;
  number: string;
  reporterId: string;
  assigneeId: string;
  createdDate: Date;
  dueDate?: Date | undefined;
  completedDate?: Date | undefined;
  status: ProjectTaskStatus;
  projectId: string;
}

export class ProjectTaskFilter {
  name: string | null | undefined;
  description: string | null | undefined;
  number: string | null | undefined;
  reporterId: string | null | undefined;
  assigneeId: string | null | undefined;
  createdDate: Date | null | undefined;
  dueDate: Date | null | undefined;
  completedDate: Date | null | undefined;
  status: ProjectTaskStatus | null | undefined;
  projectId: string | null | undefined;
}
