/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import "rxjs/add/observable/fromPromise";
import "rxjs/add/observable/of";
import "rxjs/add/observable/throw";
import "rxjs/add/operator/map";
import "rxjs/add/operator/toPromise";
import "rxjs/add/operator/mergeMap";
import "rxjs/add/operator/catch";

import { Observable } from "rxjs/Observable";
import { Injectable, Inject, Optional, InjectionToken } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpResponseBase,
  HttpErrorResponse
} from "@angular/common/http";
import { API_BASE_URL, httpOptions } from "../globals";

export interface IUsersClient {
  getByFilter(filter: UserFilter): Observable<User[] | null>;
  create(model: CreateUserModel | null): Observable<object | null>;
  getById(id: string): Observable<User | null>;
  update(id: string, model: UpdateUserModel | null): Observable<object | null>;
  delete(id: string): Observable<object | null>;
}

@Injectable()
export class UsersClient implements IUsersClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional()
    @Inject(API_BASE_URL)
    baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  getByFilter(filter: UserFilter): Observable<User[] | null> {
    let url_ = this.baseUrl + "/api/Users?";
    if (name !== undefined)
      url_ += "Name=" + encodeURIComponent("" + name) + "&";
    url_ = url_.replace(/[?&]$/, "");

    return this.http.get(url_).map(x => {
      return <User[]>x;
    });
  }

  create(model: CreateUserModel | null): Observable<object | null> {
    let url_ = this.baseUrl + "/api/Users";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    return this.http.post(url_, content_, httpOptions);
  }

  getById(id: string): Observable<User | null> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    return this.http.get(url_).map(x => {
      return <User>x;
    });
  }

  update(id: string, model: UpdateUserModel | null): Observable<object | null> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    return this.http.put(url_, content_, httpOptions);
  }

  delete(id: string): Observable<object | null> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    return this.http.delete(url_);
  }
}

export class CreateUserModel implements ICreateUserModel {
  name: string;

  constructor(data?: ICreateUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.name = data["Name"];
    }
  }

  static fromJS(data: any): CreateUserModel {
    data = typeof data === "object" ? data : {};
    let result = new CreateUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["Name"] = this.name;
    return data;
  }
}

export interface ICreateUserModel {
  name: string;
}

export class UpdateUserModel implements IUpdateUserModel {
  name: string;

  constructor(data?: IUpdateUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.name = data["Name"];
    }
  }

  static fromJS(data: any): UpdateUserModel {
    data = typeof data === "object" ? data : {};
    let result = new UpdateUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["Name"] = this.name;
    return data;
  }
}

export interface IUpdateUserModel {
  name: string;
}

export class User {
  id: string;
  name: string;
}

export class UserFilter {
  name: string | null | undefined;
}
